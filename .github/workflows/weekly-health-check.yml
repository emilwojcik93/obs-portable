name: 🔍 Weekly Infrastructure Health Check

on:
  schedule:
    # Run every Sunday at 6:00 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:
    # Allow manual triggering for testing

permissions:
  issues: write

jobs:
  health-check:
    runs-on: windows-2025
    
    steps:
    - name: 🔄 Checkout Repository
      uses: actions/checkout@v4

    - name: 🔍 Test Script CheckOnly Mode
      id: script_test
      shell: pwsh
      run: |
        try {
          .github/scripts/test-checkonly-mode.ps1 -ScriptPath ".\Deploy-OBSStudio.ps1" -PerformanceMode 60
          echo "SCRIPT_STATUS=PASS" >> $env:GITHUB_OUTPUT
        } catch {
          echo "SCRIPT_STATUS=FAIL" >> $env:GITHUB_OUTPUT
          echo "SCRIPT_ERROR=$($_.Exception.Message)" >> $env:GITHUB_OUTPUT
        }

    - name: 🔍 Test OBS Studio Version Detection
      id: obs_version_test
      shell: pwsh
      run: |
        $output = .github/scripts/test-obs-version.ps1 | Out-String
        $output -split "`n" | ForEach-Object {
          if ($_ -match "^(VERSION_STATUS|OBS_VERSION|VERSION_ERROR)=(.+)$") {
            echo "$($matches[1])=$($matches[2])" >> $env:GITHUB_OUTPUT
          }
        }

    - name: 🔗 Test Download Link Availability
      id: download_test
      shell: pwsh
      run: |
        $output = .github/scripts/test-download-links.ps1 | Out-String
        $output -split "`n" | ForEach-Object {
          if ($_ -match "^(DOWNLOAD_STATUS|DOWNLOAD_SIZE_MB|DOWNLOAD_ERROR)=(.+)$") {
            echo "$($matches[1])=$($matches[2])" >> $env:GITHUB_OUTPUT
          }
        }

    - name: 🎛️ Test Performance Mode Parameters
      id: performance_test
      shell: pwsh
      run: |
        try {
          .github/scripts/test-performance-modes.ps1 -ScriptPath ".\Deploy-OBSStudio.ps1"
          echo "PERFORMANCE_STATUS=PASS" >> $env:GITHUB_OUTPUT
          echo "PERFORMANCE_PASS_COUNT=5" >> $env:GITHUB_OUTPUT
          echo "PERFORMANCE_TOTAL_COUNT=5" >> $env:GITHUB_OUTPUT
        } catch {
          echo "PERFORMANCE_STATUS=FAIL" >> $env:GITHUB_OUTPUT
          echo "PERFORMANCE_PASS_COUNT=0" >> $env:GITHUB_OUTPUT
          echo "PERFORMANCE_TOTAL_COUNT=5" >> $env:GITHUB_OUTPUT
        }

    - name: 📊 Generate Health Report
      shell: pwsh
      run: |
        .github/scripts/generate-health-report.ps1 `
          -ScriptStatus "${{ steps.script_test.outputs.SCRIPT_STATUS }}" `
          -VersionStatus "${{ steps.obs_version_test.outputs.VERSION_STATUS }}" `
          -DownloadStatus "${{ steps.download_test.outputs.DOWNLOAD_STATUS }}" `
          -PerformanceStatus "${{ steps.performance_test.outputs.PERFORMANCE_STATUS }}" `
          -ObsVersion "${{ steps.obs_version_test.outputs.OBS_VERSION }}" `
          -DownloadSize "${{ steps.download_test.outputs.DOWNLOAD_SIZE_MB }}" `
          -PerformancePassCount "${{ steps.performance_test.outputs.PERFORMANCE_PASS_COUNT }}" `
          -PerformanceTotalCount "${{ steps.performance_test.outputs.PERFORMANCE_TOTAL_COUNT }}"

    - name: 🚨 Log Failure Details
      if: steps.script_test.outputs.SCRIPT_STATUS == 'FAIL' || steps.obs_version_test.outputs.VERSION_STATUS == 'FAIL' || steps.download_test.outputs.DOWNLOAD_STATUS == 'FAIL'
      shell: pwsh
      run: |
        Write-Host "=== Infrastructure Failure Detected ===" -ForegroundColor Red
        Write-Host ""
        Write-Host "Health Check Results:" -ForegroundColor Yellow
        Write-Host "- Script Functionality: ${{ steps.script_test.outputs.SCRIPT_STATUS }}" -ForegroundColor White
        Write-Host "- OBS Version Detection: ${{ steps.obs_version_test.outputs.VERSION_STATUS }}" -ForegroundColor White
        Write-Host "- Download Link Availability: ${{ steps.download_test.outputs.DOWNLOAD_STATUS }}" -ForegroundColor White
        Write-Host ""
        
        if ("${{ steps.script_test.outputs.SCRIPT_STATUS }}" -eq "FAIL") {
          Write-Host "Script Error Details:" -ForegroundColor Red
          Write-Host "${{ steps.script_test.outputs.SCRIPT_ERROR }}" -ForegroundColor White
        }
        
        if ("${{ steps.obs_version_test.outputs.VERSION_STATUS }}" -eq "FAIL") {
          Write-Host "Version Detection Error:" -ForegroundColor Red
          Write-Host "${{ steps.obs_version_test.outputs.VERSION_ERROR }}" -ForegroundColor White
        }
        
        if ("${{ steps.download_test.outputs.DOWNLOAD_STATUS }}" -eq "FAIL") {
          Write-Host "Download Link Error:" -ForegroundColor Red
          Write-Host "${{ steps.download_test.outputs.DOWNLOAD_ERROR }}" -ForegroundColor White
        }
        
        Write-Host ""
        Write-Host "Manual investigation required for failed components" -ForegroundColor Yellow

    - name: 📈 Update Repository Health Badge
      if: always()
      shell: pwsh
      run: |
        # Generate health status data for potential badge updates
        $scriptStatus = "${{ steps.script_test.outputs.SCRIPT_STATUS }}"
        $versionStatus = "${{ steps.obs_version_test.outputs.VERSION_STATUS }}"
        $downloadStatus = "${{ steps.download_test.outputs.DOWNLOAD_STATUS }}"
        $performanceStatus = "${{ steps.performance_test.outputs.PERFORMANCE_STATUS }}"
        
        $healthData = @{
          timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          overallStatus = if (($scriptStatus -eq 'PASS') -and ($versionStatus -eq 'PASS') -and ($downloadStatus -eq 'PASS') -and ($performanceStatus -eq 'PASS')) { "EXCELLENT" } else { "NEEDS_ATTENTION" }
          scriptStatus = $scriptStatus
          versionStatus = $versionStatus
          downloadStatus = $downloadStatus
          performanceStatus = $performanceStatus
          obsVersion = "${{ steps.obs_version_test.outputs.OBS_VERSION }}"
        }
        
        $healthData | ConvertTo-Json | Out-File -FilePath "health-status.json" -Encoding UTF8
        Write-Host "+ Health status data generated" -ForegroundColor Green
