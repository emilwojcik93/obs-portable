# Graceful OBS shutdown script - optimized for speed and reliability
param()

# Show notification that stop is starting
try {
    Add-Type -AssemblyName System.Windows.Forms
    $notification = New-Object System.Windows.Forms.NotifyIcon
    $notification.Icon = [System.Drawing.SystemIcons]::Information
    $notification.BalloonTipIcon = 'Info'
    $notification.BalloonTipText = 'Stopping OBS recording...'
    $notification.BalloonTipTitle = 'OBS Recording'
    $notification.Visible = $true
    $notification.ShowBalloonTip(3000)
    Start-Sleep -Milliseconds 500
    $notification.Dispose()
} catch {
    Write-Host "Starting OBS shutdown..." -ForegroundColor Cyan
}

$obs = Get-Process -Name 'obs64' -ErrorAction SilentlyContinue
if ($obs) {
    Write-Host "Found OBS process, stopping recording and closing..." -ForegroundColor Cyan
    
    try {
        # Method 1: Quick command line stop (if WebSocket enabled)
        $webSocketEnabled = {{WEBSOCKET_ENABLED}}
        if ($webSocketEnabled) {
            try {
                Push-Location (Split-Path $obs.Path)
                $stopProcess = Start-Process -FilePath ".\obs64.exe" -ArgumentList @("--portable", "--stoprecording") -WindowStyle Hidden -PassThru
                $stopProcess.WaitForExit(3000)  # Quick 3-second timeout
                Write-Host "Recording stopped via command line" -ForegroundColor Green
            } catch {
                Write-Host "Command line stop failed, using force method..." -ForegroundColor Yellow
            } finally {
                Pop-Location
            }
        }
        
        # Method 2: Direct force termination (most reliable)
        Write-Host "Force terminating OBS process..." -ForegroundColor Yellow
        $obs.Kill()
        $obs.WaitForExit(5000)
        
        # Clean up any remaining processes
        $allOBSProcesses = Get-Process -Name 'obs64' -ErrorAction SilentlyContinue
        foreach ($remainingOBS in $allOBSProcesses) {
            try {
                $remainingOBS.Kill()
                $remainingOBS.WaitForExit(2000)
            } catch { }
        }
        
        Write-Host "OBS stopped successfully" -ForegroundColor Green
        
        # Show success notification
        try {
            Add-Type -AssemblyName System.Windows.Forms
            $notification = New-Object System.Windows.Forms.NotifyIcon
            $notification.Icon = [System.Drawing.SystemIcons]::Information
            $notification.BalloonTipIcon = 'Info'
            $notification.BalloonTipText = 'OBS recording stopped successfully'
            $notification.BalloonTipTitle = 'OBS Recording'
            $notification.Visible = $true
            $notification.ShowBalloonTip(3000)
            Start-Sleep -Milliseconds 500
            $notification.Dispose()
        } catch {
            Write-Host "OBS recording stopped successfully" -ForegroundColor Green
        }
        
    } catch {
        Write-Host "Error during OBS shutdown: $($_.Exception.Message)" -ForegroundColor Red
        
        # Show error notification
        try {
            Add-Type -AssemblyName System.Windows.Forms
            $notification = New-Object System.Windows.Forms.NotifyIcon
            $notification.Icon = [System.Drawing.SystemIcons]::Error
            $notification.BalloonTipIcon = 'Error'
            $notification.BalloonTipText = 'Failed to stop OBS recording'
            $notification.BalloonTipTitle = 'OBS Recording'
            $notification.Visible = $true
            $notification.ShowBalloonTip(3000)
            Start-Sleep -Milliseconds 500
            $notification.Dispose()
        } catch { }
    }
} else {
    Write-Host "OBS not running" -ForegroundColor Gray
    
    # Show info notification
    try {
        Add-Type -AssemblyName System.Windows.Forms
        $notification = New-Object System.Windows.Forms.NotifyIcon
        $notification.Icon = [System.Drawing.SystemIcons]::Information
        $notification.BalloonTipIcon = 'Info'
        $notification.BalloonTipText = 'OBS is not currently running'
        $notification.BalloonTipTitle = 'OBS Recording'
        $notification.Visible = $true
        $notification.ShowBalloonTip(2000)
        Start-Sleep -Milliseconds 500
        $notification.Dispose()
    } catch {
        Write-Host "OBS is not currently running" -ForegroundColor Gray
    }
}