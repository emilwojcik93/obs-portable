param([string]$Action = "Start")

function Write-ServiceLog {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logPath = "${env:TEMP}\OBSAutoRecord.log"
    Add-Content -Path $logPath -Value "[$timestamp] $Message" -ErrorAction SilentlyContinue
}

function Stop-OBSRecordingSafely {
    Write-ServiceLog "Stopping OBS recording safely..."
    $obsProcesses = Get-Process -Name "obs64" -ErrorAction SilentlyContinue

    if ($obsProcesses) {
        foreach ($proc in $obsProcesses) {
            try {
                Write-ServiceLog "Attempting graceful shutdown of OBS process $($proc.Id)"
                $proc.CloseMainWindow()

                if (-not $proc.WaitForExit(20000)) {
                    Write-ServiceLog "Graceful shutdown failed, forcing termination"
                    $proc.Kill()
                    $proc.WaitForExit(5000)
                }
                Write-ServiceLog "OBS process terminated successfully"
            } catch {
                Write-ServiceLog "Error stopping OBS: $($_.Exception.Message)"
            }
        }
    } else {
        Write-ServiceLog "No OBS processes found"
    }
}

function Start-RecordingWithAutoStop {
    param([string]$OBSPath, [string]$OutputPath)

    Write-ServiceLog "Starting OBS recording with auto-stop"

    # Start OBS from the correct working directory (same level as exe)
    $obsExeDir = Join-Path $OBSPath "bin\64bit"
    $obsExe = Join-Path $obsExeDir "obs64.exe"

    if (Test-Path $obsExe) {
        try {
            # Change to the executable directory (critical for OBS to work properly)
            Push-Location $obsExeDir
            $args = @("--portable", "--startrecording", "--minimize-to-tray", "--disable-shutdown-check")
            Start-Process -FilePath ".\obs64.exe" -ArgumentList $args -WorkingDirectory $obsExeDir -WindowStyle Minimized
            Write-ServiceLog "OBS started successfully from working directory: $obsExeDir"

            # Start background auto-stop timer (no scheduled task needed)
            Start-Job -ScriptBlock {
                param($ServiceScriptPath, $LogPath)
                Start-Sleep -Seconds (2 * 60 * 60)  # 2 hours
                Add-Content -Path $LogPath -Value "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] Auto-stop timer triggered after 2 hours"
                & $ServiceScriptPath -Action AutoStop
            } -ArgumentList $PSCommandPath, "${env:TEMP}\OBSAutoRecord.log" | Out-Null

            Write-ServiceLog "Auto-stop timer started for 2 hours (background job)"
        } finally {
            Pop-Location
        }
    } else {
        Write-ServiceLog "OBS executable not found at $obsExe"
    }
}

function Show-ServiceNotification {
    param([string]$Message, [string]$Type = "Info")

    try {
        Add-Type -AssemblyName System.Windows.Forms
        $notification = New-Object System.Windows.Forms.NotifyIcon
        $notification.Icon = [System.Drawing.SystemIcons]::Information
        $notification.BalloonTipIcon = $Type
        $notification.BalloonTipText = $Message
        $notification.BalloonTipTitle = "OBS Recording"
        $notification.Visible = $true
        $notification.ShowBalloonTip(5000)

        Start-Sleep -Seconds 1
        $notification.Dispose()
    } catch {
        # Fallback to popup
        try {
            (New-Object -ComObject WScript.Shell).Popup($Message, 3, "OBS Recording", 64) | Out-Null
        } catch {
            Write-ServiceLog "Failed to show notification: $Message"
        }
    }
}

# Main service logic
switch ($Action) {
    "Start" {
        Write-ServiceLog "=== Starting Auto-Recording Service ==="
        Start-RecordingWithAutoStop -OBSPath "{{INSTALL_PATH}}" -OutputPath "{{ONEDRIVE_PATH}}"
        Show-ServiceNotification -Message "Recording started automatically" -Type "Info"
    }
    "Stop" {
        Write-ServiceLog "=== Stopping Auto-Recording Service ==="
        Stop-OBSRecordingSafely
        Show-ServiceNotification -Message "Recording stopped" -Type "Info"
        # Clean up any background auto-stop jobs
        Get-Job | Where-Object { $_.State -eq "Running" } | Stop-Job -ErrorAction SilentlyContinue
        Get-Job | Remove-Job -ErrorAction SilentlyContinue
    }
    "Shutdown" {
        Write-ServiceLog "=== System Shutdown - Emergency Stop ==="
        Stop-OBSRecordingSafely
        Show-ServiceNotification -Message "Recording stopped for shutdown" -Type "Warning"
    }
    "AutoStop" {
        Write-ServiceLog "=== Auto-Stop Triggered (2h limit) ==="
        Stop-OBSRecordingSafely
        Show-ServiceNotification -Message "Recording auto-stopped (2h limit)" -Type "Warning"
    }
}
